---
openapi: 3.0.3
info:
  title: Schema of Common Query Language (CQL)
  description: 'For use in OpenAPI 3.0 documents'
  version: '1.0.0-SNAPSHOT'
paths: {}
components:
  schemas:
    cqlFilter:
      oneOf:
      - "$ref": "#/components/schemas/booleanValueExpression"
      - "$ref": "#/components/schemas/comparisonPredicate"
      - "$ref": "#/components/schemas/spatialPredicate"
      - "$ref": "#/components/schemas/temporalPredicate"
      - "$ref": "#/components/schemas/arrayExpression"
    booleanValueExpression:
       oneOf:
          - "$ref": "#/components/booleanTerm"
          - type: object
            required:
               - or
            properties:
               or:
                  type: array
                  items:
                     "$ref": "#/components/schemas/predicate"
                     minItems: 2
                     maxItems: 2
    booleanTerm:
       oneOf:
          - "$ref": "#/components/schemas/booleanFactor"
          - type: object
            required:
               - and
            properties:
               and:
                  type: array
                  items:
                     "$ref": "#/components/schemas/predicate"
                     minItems: 2
                     maxItems: 2
    booleanFactor:
       oneOf:
          - type: object
            required: 
               - not
            properties:
               not:
                  "$ref": "#/components/schemas/booleanPrimary"
          - "$ref": "#/components/schemas/booleanPrimary"
    booleanPrimary:
       oneOf:
          - "$ref": "#/components/schemas/predicate"
          - "$ref": "#/components/schemas/cqlFilter"
    predicate:
       oneOf:
          - "$ref": "#/components/schemas/comparisonPredicate"
          - "$ref": "#/components/schemas/spatialPredicate"
          - "$ref": "#/components/schemas/temporalPredicate"
    comparisonPredicate:
       oneOf:
       - "$ref": "#/components/schemas/binaryComparisonPredicate"
       - "$ref": "#/components/schemas/isLikePredicate"
       - "$ref": "#/components/schemas/isBetweenPredicate"
       - "$ref": "#/components/schemas/isInListPredicate"
       - "$ref": "#/components/schemas/isNullPredicate"
    binaryComparisonPredicate:
       oneOf:
       - "$ref": "#/components/schemas/eqExpression"
       - "$ref": "#/components/schemas/ltExpression"
       - "$ref": "#/components/schemas/gtExpression"
       - "$ref": "#/components/schemas/lteExpression"
       - "$ref": "#/components/schemas/gteExpression"
    eqExpression:
       type: object
       required:
          - eq
       properties:
          eq:
             "$ref": "#/components/scalarOperands"
    ltExpression:
       type: object
       required:
          - lt
       properties:
          lt:
             "$ref": "#/components/scalarOperands"
    gtExpression:
       type: object
       required:
          - gt
       properties:
          gt:
             "$ref": "#/components/scalarOperands"
    lteExpression:
       type: object
       required:
          - lte
       properties:
          gt:
             "$ref": "#/components/scalarOperands"
    gteExpression:
       type: object
       required:
          - gte
       properties:
          gte:
             "$ref": "#/components/scalarOperands"
    isBetweenPredicate:
       type: object
       required:
          - between
       properties:
          between:
             type: object
             required:
                - property
                - lower
                - upper
             properties:
                property:
                   type: string
                lower:
                   "$ref": "#/components/schemas/scalarLiteral"
                upper:
                   "$ref": "#/components/schemas/scalarLiteral"
    isLikePredicate:
       type: object
       required:
          - like
       properties:
          like:
             type: object
             required:
                - property
                - value
             properties:
                wildcard:
                   type: string
                   default: '%'
                singleChar:
                   type: string
                   default: '.'
                escape:
                   type: string
                   default: '\\'
                nocase:
                   type: boolean
                   default: true
                property:
                   type: string
                value:
                   "$ref": "#/components/schemas/scalarLiteral"
    isInListPredicate:
       type: object
       required:
          - in
       properties:
          in:
             type: object
             required:
                - property
                - values
             properties:
                nocase:
                   type: boolean
                   default: true
                property:
                   type: string
                values:
                   type: array
                   items:
                      "$ref": "#/components/schemas/scalarLiteral"
    scalarOperands:
       type: array
       items:
          "$ref": "#/components/schemas/scalarExpression"
          minItems: 2
          maxItems: 2
    scalarExpression:
       type: array
       items:
          oneOf:
             - "$ref": "#/components/schemas/scalarLiteral"
             - "$ref": "#/components/schemas/propertyRef"
             - "$ref": "#/components/schemas/functionRef"
             - "$ref": "#/components/schemas/arithmeticExpression"
          minItems: 2
          maxItems: 2
    isNullPredicate:
       type: object
       required:
          - isNull
       properties:
          isNull:
             "$ref": "#/components/schemas/scalarExpression"
    spatialPredicate:
       oneOf:
          - "$ref": "#/components/schemas/intersectsExpression"
          - "$ref": "#/components/schemas/equalsExpression"
          - "$ref": "#/components/schemas/disjoinExpression"
          - "$ref": "#/components/schemas/touchesExpression"
          - "$ref": "#/components/schemas/withinExpression"
          - "$ref": "#/components/schemas/overlapsExpression"
          - "$ref": "#/components/schemas/crossesExpression"
          - "$ref": "#/components/schemas/containsExpression"
    intersectsExpression:
       type: object
       required:
          - intersects
       properties:
          intersects:
             "$ref": "#/components/schemas/spatialOperands"
    equalsExpression:
       type: object
       required:
          - equals
       properties:
          equals:
             "$ref": "#/components/schemas/spatialOperands"
    disjointExpression:
       type: object
       required:
          - disjoint
       properties:
          disjoint:
             "$ref": "#/components/schemas/spatialOperands"
    touchesExpression:
       type: object
       required:
          - touches
       properties:
          touches:
             "$ref": "#/components/schemas/spatialOperands"
    withinExpression:
       type: object
       required:
          - within
       properties:
          within:
             "$ref": "#/components/schemas/spatialOperands"
    overlapsExpression:
       type: object
       required:
          - overlaps
       properties:
          overlaps:
             "$ref": "#/components/schemas/spatialOperands"
    crossesExpression:
       type: object
       required:
          - crosses
       properties:
          crosses:
             "$ref": "#/components/schemas/spatialOperands"
    containsExpression:
       type: object
       required:
          - contains
       properties:
          contains:
             "$ref": "#/components/schemas/spatialOperands"
    spatialOperands:
       type: array
       items:
          "$ref": "#/components/schemas/geomExpression"
          minItems: 2
          maxItems: 2
    geomExpression:
       oneOf:
          - "$ref": "#/components/schemas/spatialLiteral"
          - "$ref": "#/components/schemas/propertyRef"
          - "$ref": "#/components/schemas/functionRef"
    temporalPredicate:
       oneOf:
          - "$ref": "#/components/schemas/beforeExpression"
          - "$ref": "#/components/schemas/afterExpression"
          - "$ref": "#/components/schemas/meetsExpression"
          - "$ref": "#/components/schemas/metbyExpression"
          - "$ref": "#/components/schemas/toverlapsExpression"
          - "$ref": "#/components/schemas/overlappedbyExpression"
          - "$ref": "#/components/schemas/beginsExpression"
          - "$ref": "#/components/schemas/begunbyExpression"
          - "$ref": "#/components/schemas/duringExpression"
          - "$ref": "#/components/schemas/tcontainsExpression"
          - "$ref": "#/components/schemas/endsExpression"
          - "$ref": "#/components/schemas/endedbyExpression"
          - "$ref": "#/components/schemas/tequalsExpression"
          - "$ref": "#/components/schemas/anyinteractsExpression"
    beforeExpression:
       type: object
       required:
          - before
       properties:
          before:
             "$ref": "#/components/schemas/temporalOperands"
    afterExpression:
       type: object
       required:
          - after
       properties:
          after:
             "$ref": "#/components/schemas/temporalOperands"
    meetsExpression:
       type: object
       required:
          - meets
       properties:
          meets:
             "$ref": "#/components/schemas/temporalOperands"
    metbyExpression:
       type: object
       required:
          - metby
       properties:
          metby:
             "$ref": "#/components/schemas/temporalOperands"
    toverlapsExpression:
       type: object
       required:
          - toverlaps
       properties:
          toverlaps:
             "$ref": "#/components/schemas/temporalOperands"
    overlappedByExpression:
       type: object
       required:
          - overlappedby
       properties:
          overlappedby:
             "$ref": "#/components/schemas/temporalOperands"
    beginsExpression:
       type: object
       required:
          - begins
       properties:
          begins:
             "$ref": "#/components/schemas/temporalOperands"
    begunbyExpression:
       type: object
       required:
          - begunby
       properties:
          begunby:
             "$ref": "#/components/schemas/temporalOperands"
    duringExpression:
       type: object
       required:
          - during
       properties:
          during:
             "$ref": "#/components/schemas/temporalOperands"
    tcontainsExpression:
       type: object
       required:
          - tcontains
       properties:
          tcontains:
             "$ref": "#/components/schemas/temporalOperands"
    endsExpression:
       type: object
       required:
          - ends
       properties:
          ends:
             "$ref": "#/components/schemas/temporalOperands"
    endedbyExpression:
       type: object
       required:
          - endedby
       properties:
          endedby:
             "$ref": "#/components/schemas/temporalOperands"
    tequalsExpression:
       type: object
       required:
          - tequals
       properties:
          tequals:
             "$ref": "#/components/schemas/temporalOperands"
    temporalOperands:
       type: array
       items:
          "$ref": "#/components/schemas/temporalExpression"
          minItems: 2
          maxItems: 2
    temporalExpression:
       oneOf:
          - "$ref": "#/components/schemas/temporalLiteral"
          - "$ref": "#/components/schemas/propertyRef"
          - "$ref": "#/components/schemas/functionRef"
    arrayExpression:
       oneOf:
          - "$ref": "#/components/schemas/aequalsExpression"
          - "$ref": "#/components/schemas/acontainsExpression"
          - "$ref": "#/components/schemas/acontainedByExpression"
          - "$ref": "#/components/schemas/aoverlapsExpression"
    aequalsExpression:
       type: object
       required:
          - aequals
       properties:
          aequals:
             "$ref": "#/components/schemas/arrayOperands"
    acontainsExpression:
       type: object
       required:
          - acontains
       properties:
          acontains:
             "$ref": "#/components/schemas/arrayOperands"
    acontainedByExpression:
       type: object
       required:
          - acontainedBy
       properties:
          acontainedBy:
             "$ref": "#/components/schemas/arrayOperands"
    aoverlapsExpression:
       type: object
       required:
          - aoverlaps
       properties:
          aoverlaps:
             "$ref": "#/components/schemas/arrayOperands"
    arrayOperands:
       type: array
       items:
          type: array
          items:
             "$ref": "#/components/schemas/arrayElement"
       minItems: 2
       maxItems: 2
    arrayElement:
       oneOf:
          - "$ref": "#/components/schemas/scalarLiteral"
          - "$ref": "#/components/schemas/spatialLiteral"
          - "$ref": "#/components/schemas/temporalLiteral"
          - "$ref": "#/components/schemas/functionRef"
          - "$ref": "#/components/schemas/arithmeticExpression"
          - "$ref": "#/components/schemas/arrayElement"
    arithmeticExpression:
       oneOf:
          - "$ref": "#/components/schemas/addExpression"
          - "$ref": "#/components/schemas/subExpression"
          - "$ref": "#/components/schemas/mulExpression"
          - "$ref": "#/components/schemas/divExpression"
    addExpression:
       type: object
       required:
          - "+"
       properties:
          "+":
             "$ref": "#/components/schemas/arithmeticOperands"
    subExpression:
       type: object
       required:
          - "-"
       properties:
          "-":
             "$ref": "#/components/schemas/arithmeticOperands"
    mulExpression:
       type: object
       required:
          - "*"
       properties:
          "*":
             "$ref": "#/components/schemas/arithmeticOperands"
    divExpression:
       type: object
       required:
          - "/"
       properties:
          "/":
             "$ref": "#/components/schemas/arithmeticOperands"
    arithmeticOperands:
       type: array
       items:
          oneOf:
             - "$ref": "#/components/schemas/arithmeticExpression"
             - "$ref": "#/components/schemas/propertyRef"
             - "$ref": "#/components/schemas/functionRef"
             - type: number
          minItems: 2
          maxItems: 2
    propertyRef:
       type: object
       required:
          - property
       properties:
          propertyName:
             type: string
    functionRef:
      type: object
      required:
         - function
      properties:
         function:
            "$ref": "#/components/schemas/function"
    function:
       type: object
       required:
          - name
       properties:
          name: 
             type: string
          arguments:
             type: array
             items:
                oneOf:
                   - "$ref": "#/components/schemas/scalarLiteral"
                   - "$ref": "#/components/schemas/spatialLiteral"
                   - "$ref": "#/components/schemas/temporalLiteral"
                   - "$ref": "#/components/schemas/propertyRef"
                   - "$ref": "#/components/schemas/functionRef"
                   - "$ref": "#/components/schemas/arithmeticExpression"
    scalarLiteral:
      oneOf:
      - type: string
      - type: number
      - type: boolean
    spatialLiteral:
       oneOf:
          - "$ref": "#/components/schemas/geometryLiteral"
          - "$ref": "#/components/schemas/envelopeLiteral"
    geometryLiteral:
      oneOf:
         - "$ref": "#/components/schemas/point"
         - "$ref": "#/components/schemas/lineString"
         - "$ref": "#/components/schemas/polygon"
         - "$ref": "#/components/schemas/multipoint"
         - "$ref": "#/components/schemas/multilinestring"
         - "$ref": "#/components/schemas/multipolygon"
    geojson-bbox:
       type: array
       items:
          type: number
          minItems: 4
          maxItems: 4
    point:
       type: object
       required:
          - type
          - coordinates
       properties:
          type:
             type: string
             enum:
                - Point
          coordinates:
             type: array
             items:
                type: number
                minItems: 2
          bbox:
             "$ref": "#/components/schemas/geojson-bbox"
    linestring:
       type: object
       required:
          - type
          - coordinates
       properties:
          type:
             type: string
             enum:
                - LineString
          coordinates:
             type: array
             items:
                type: array
                items:
                   type: array
                   items:
                      type: number
                minItems: 2
             minItems: 2
          bbox:
             "$ref": "#/components/schemas/geojson-bbox"
    polygon:
       type: object
       required:
          - type
          - coordinates
       properties:
          type:
             type: string
             enum:
                - Polygon
          coordinates:
             type: array
             items:
                type: array
                items:
                   type: array
                   items:
                      type: number
                   minItems: 2
                minItems: 4
          bbox:
             "$ref": "#/components/schemas/geojson-bbox"
    multipoint:
       type: object
       required:
          - type
          - coordinates
       properties:
          type:
             type: string
             enum:
                - MultiPoint
          coordinates:
             type: array
             items:
                type: array
                items:
                   type: number
                minItems: 2
          bbox:
             "$ref": "#/components/schemas/geojson-bbox"
    multilinestring:
       type: object
       required:
          - type
          - coordinates
       properties:
          type:
             type: string
             enum:
                - MultiLineString
          coordinates:
             type: array
             items:
                type: array
                items:
                   type: array
                   items:
                      type: number
                   minItems: 2
                minItems: 2
          bbox:
             "$ref": "#/components/schemas/geojson-bbox"
    multipolygon:
       type: object
       required:
          - type
          - coordinates
       properties:
          type:
             type: string
             enum:
                - MultiPolygon
          coordinates:
             type: array
             items:
                type: array
                items:
                   type: array
                   items:
                      type: array
                      items:
                         type: number
                      minItems: 2
                   minItems: 4
          bbox:
             "$ref": "#/components/schemas/geojson-bbox"
    envelopeLiteral:
       type: object
       required: bbox
       properties:
          "$ref": "#/components/schemas/bbox"
    bbox:
       type: array
       items:
          type: number
          oneOf:
             - minItems: 4,
               maxItems: 4
             - minItems: 6
               maxItems: 6
    temporalLiteral:
      oneOf:
      - "$ref": "#/components/schemas/timeLiteral"
      - "$ref": "#/components/schemas/periodLiteral"
    timeLiteral:
      type: string
      pattern: "[0-9][0-9][0-9][0-9]-[0-1][0-9]-[0-9][0-9](T[0-2][0-9]:[0-5][0-9]:[0-5][0-9](.[0-9]*)?)?"
    periodLiteral:
      type: array
      items:
        type: string
        pattern: "[0-9][0-9][0-9][0-9]-[0-1][0-9]-[0-9][0-9](T[0-2][0-9]:[0-5][0-9]:[0-5][0-9](.[0-9]*)?)?"
        minItems: 2
        maxItems: 2
